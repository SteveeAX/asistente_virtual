#!/bin/bash

# Script de lanzamiento con logging detallado para autoarranque

LOG_FILE="/home/steveen/asistente_kata/logs/autostart.log"
APP_PATH="/home/steveen/asistente_kata/src/app/main_app.py"
VENV_PATH="/home/steveen/gcp-tts-venv/bin/python"

# Crear directorio de logs si no existe
mkdir -p /home/steveen/asistente_kata/logs

# Funci√≥n de logging con timestamp
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - AUTOSTART: $1" | tee -a "$LOG_FILE"
}

log "========================================="
log "üöÄ INICIO DE AUTOARRANQUE"
log "========================================="
log "Script: $0"
log "PID: $$, PPID: $PPID"
log "Usuario: $(whoami)"
log "HOME: $HOME"
log "DISPLAY: $DISPLAY"
log "PWD: $(pwd)"

# Verificar entorno gr√°fico
log "üñ•Ô∏è Verificando entorno gr√°fico..."
if command -v xset >/dev/null 2>&1; then
    if xset q >/dev/null 2>&1; then
        log "‚úÖ Entorno gr√°fico disponible"
        xset -display :0 q 2>&1 | head -3 | while read line; do
            log "X11_INFO: $line"
        done
    else
        log "‚ùå ERROR: xset q fall√≥"
        exit 1
    fi
else
    log "‚ö†Ô∏è ADVERTENCIA: xset no disponible"
fi

# Verificar directorio de trabajo
log "üìÅ Verificando directorio de trabajo..."
if [ -d "/home/steveen/asistente_kata" ]; then
    cd /home/steveen/asistente_kata
    log "‚úÖ Directorio de trabajo: $(pwd)"
else
    log "‚ùå ERROR: Directorio del proyecto no encontrado"
    exit 1
fi

# Verificar entorno virtual
log "üêç Verificando entorno virtual..."
if [ -f "$VENV_PATH" ]; then
    log "‚úÖ Python virtual encontrado: $VENV_PATH"
    PYTHON_VERSION=$($VENV_PATH --version 2>&1)
    log "PYTHON_VERSION: $PYTHON_VERSION"
else
    log "‚ùå ERROR: Python virtual no encontrado en $VENV_PATH"
    exit 1
fi

# Verificar aplicaci√≥n principal
log "üì± Verificando aplicaci√≥n principal..."
if [ -f "$APP_PATH" ]; then
    log "‚úÖ Aplicaci√≥n encontrada: $APP_PATH"
    APP_SIZE=$(wc -l < "$APP_PATH")
    log "APP_SIZE: $APP_SIZE l√≠neas"
else
    log "‚ùå ERROR: Aplicaci√≥n no encontrada en $APP_PATH"
    exit 1
fi

# Verificar conectividad de red
log "üåê Verificando conectividad..."
if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
    log "‚úÖ Conectividad de red OK"
else
    log "‚ö†Ô∏è ADVERTENCIA: Sin conectividad de red"
fi

# Verificar credenciales de Google Cloud
log "üîë Verificando credenciales..."
CREDS_FILE="/home/steveen/asistente_kata/config/credentials/gleaming-terra-454706-r0-0b19bb6937f8.json"
if [ -f "$CREDS_FILE" ]; then
    log "‚úÖ Credenciales de Google Cloud encontradas"
else
    log "‚ö†Ô∏è ADVERTENCIA: Credenciales de Google Cloud no encontradas"
fi

# Verificar dependencias cr√≠ticas
log "üì¶ Verificando dependencias..."
$VENV_PATH -c "import customtkinter" 2>/dev/null
if [ $? -eq 0 ]; then
    log "‚úÖ CustomTkinter disponible"
else
    log "‚ùå ERROR: CustomTkinter no disponible"
    exit 1
fi

# Configurar variables de entorno
export PYTHONPATH="/home/steveen/asistente_kata:$PYTHONPATH"
export GOOGLE_APPLICATION_CREDENTIALS="$CREDS_FILE"
log "üîß Variables de entorno configuradas"

# Cargar .env si existe
if [ -f ".env" ]; then
    set -a
    source .env
    set +a
    log "‚úÖ Variables de .env cargadas"
else
    log "‚ö†Ô∏è Archivo .env no encontrado"
fi

# Esperar un poco para que el sistema est√© completamente listo
log "‚è≥ Esperando 5 segundos para estabilizaci√≥n del sistema..."
sleep 5

# Lanzar aplicaci√≥n
log "üöÄ LANZANDO APLICACI√ìN PRINCIPAL..."
log "COMANDO: $VENV_PATH $APP_PATH"

# Ejecutar con redirecci√≥n de logs
exec "$VENV_PATH" "$APP_PATH" 2>&1 | while IFS= read -r line; do
    echo "$(date '+%Y-%m-%d %H:%M:%S') - APP: $line" | tee -a "$LOG_FILE"
done

# Esta l√≠nea solo se ejecuta si la aplicaci√≥n falla al iniciar
log "‚ùå APLICACI√ìN TERMIN√ì INESPERADAMENTE"